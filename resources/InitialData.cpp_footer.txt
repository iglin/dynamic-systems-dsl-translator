
InitialData::InitialData() = default;

InitialData::InitialData(double x0, double y0, double z0, double t0, double tFinal)
        : x0(x0), y0(y0), z0(z0), t0(t0), tFinal(tFinal) {}

double InitialData::firstDerivativeX(double x, double t) {
#if defined(dx)
    return dx;
#else
    throw std::invalid_argument( "dx/dt is not defined!" );
#endif
}

double InitialData::firstDerivativeY(double y, double t) {
#if defined(dy)
    return dy;
#else
    throw std::invalid_argument( "dy/dt is not defined!" );
#endif
}

double InitialData::firstDerivativeZ(double z, double t) {
#if defined(dz)
    return dz;
#else
    throw std::invalid_argument( "dz/dt is not defined!" );
#endif
}

double InitialData::getX0() const {
    return x0;
}

void InitialData::setX0(double x0) {
    InitialData::x0 = x0;
}

double InitialData::getY0() const {
    return y0;
}

void InitialData::setY0(double y0) {
    InitialData::y0 = y0;
}

double InitialData::getZ0() const {
    return z0;
}

void InitialData::setZ0(double z0) {
    InitialData::z0 = z0;
}

double InitialData::getT0() const {
    return t0;
}

void InitialData::setT0(double t0) {
    InitialData::t0 = t0;
}

double InitialData::getTFinal() const {
    return tFinal;
}

void InitialData::setTFinal(double T) {
    InitialData::tFinal = T;
}

